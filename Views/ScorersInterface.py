# Form implementation generated from reading ui file 'SIWindowTest.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtGui import QFontDatabase, QFont
from PySide6.QtWidgets import QMainWindow

from DataStore import dart_throw_history_repo
from Views.CompetitorScoreboard import Competitor_Window
from Views.MainScoreboard import Main_Window
from Views.MatchScoreboard import Match_Window
from Views.Dartboard import *
from Controllers.PlayerController import PlayerController
from Controllers.ScorersInterfaceController import ScorersInterfaceController
from Controllers.MatchController import MatchController

class Ui_MainWindow(object):
    def __init__(self):
        self.competitor_scoreboard = None
        self.match_scoreboard = None
        self.match_window = None
        self.competitor_window = None
        self.main_scoreboard = None
        self._myMatchScoreboard = None
        self.scoreboard_selection = None
        match_controller = MatchController()
        self.Match = match_controller.get_match()


        self.main_scoreboard = Main_Window()

        self.match_window = QMainWindow()
        self.match_scoreboard = Match_Window()
        self.match_scoreboard.setupUi(self.match_window)

        self.competitor_window = QMainWindow()
        self.competitor_scoreboard = Competitor_Window()
        self.competitor_scoreboard.setupUi(self.competitor_window)

        self.scorersInterfaceController = ScorersInterfaceController()

        player_controller = PlayerController()
        self.PlayerOne = player_controller.get_player_one()
        self.PlayerTwo = player_controller.get_player_two()


    def setupUi(self, MainWindow, scoreboard_selection):
        self.scoreboard_selection = scoreboard_selection
        id = QFontDatabase.addApplicationFont(".\\Assets\\Super Boys.ttf")
        if id < 0: print("Error")
        families = QFontDatabase.applicationFontFamilies(id)

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(647, 812)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.datboardPlaceholderLabel = Widget(self)
        self.datboardPlaceholderLabel.setMinimumSize(QtCore.QSize(483, 483))
        #self.datboardPlaceholderLabel.setScaledContents(True)
        self.horizontalLayout.addWidget(self.datboardPlaceholderLabel)
        self.dartboardButtonVLayout = QtWidgets.QVBoxLayout()
        self.dartboardButtonVLayout.setContentsMargins(-1, 18, -1, 18)
        self.dartboardButtonVLayout.setSpacing(18)
        self.dartboardButtonVLayout.setObjectName("dartboardButtonVLayout")
        self.missButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.missButton.setFont(QFont(families[0], 25))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.missButton.sizePolicy().hasHeightForWidth())
        self.missButton.setSizePolicy(sizePolicy)
        self.missButton.setStyleSheet(
                                        "border: 4px solid black;" 
                                        "background-color: crimson;" 
                                        "border-top-left-radius :10px;" 
                                        "border-top-right-radius : 10px;" 
                                        "border-bottom-left-radius : 10px;"
                                        "border-bottom-right-radius : 10px")
        self.missButton.setObjectName("missButton")
        self.missButton.clicked.connect(self.miss)
        self.dartboardButtonVLayout.addWidget(self.missButton)
        self.foulButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.foulButton.setFont(QFont(families[0], 25))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.foulButton.sizePolicy().hasHeightForWidth())
        self.foulButton.setSizePolicy(sizePolicy)
        self.foulButton.setStyleSheet(
                                      "border: 4px solid black;"
                                      "background-color: khaki;"
                                      "border-top-left-radius :10px;"
                                      "border-top-right-radius : 10px;"
                                      "border-bottom-left-radius : 10px;"
                                      "border-bottom-right-radius : 10px")
        self.foulButton.setObjectName("foulButton")
        self.foulButton.clicked.connect(self.foul)
        self.dartboardButtonVLayout.addWidget(self.foulButton)
        self.bounceOffButton = QtWidgets.QPushButton(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bounceOffButton.sizePolicy().hasHeightForWidth())
        self.bounceOffButton.setSizePolicy(sizePolicy)
        self.bounceOffButton.setStyleSheet(
                                      "border: 4px solid black;"
                                      "background-color: powderblue;"
                                      "border-top-left-radius :10px;"
                                      "border-top-right-radius : 10px;"
                                      "border-bottom-left-radius : 10px;"
                                      "border-bottom-right-radius : 10px")
        self.bounceOffButton.setObjectName("bounceOffButton")
        self.bounceOffButton.setFont(QFont(families[0], 25))
        self.bounceOffButton.clicked.connect(self.bounceOff)
        self.dartboardButtonVLayout.addWidget(self.bounceOffButton)
        self.horizontalLayout.addLayout(self.dartboardButtonVLayout)
        self.horizontalLayout.setStretch(0, 7)
        self.horizontalLayout.setStretch(1, 2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.dartHistoryLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistoryLabel.setMinimumSize(QtCore.QSize(0, 79))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.dartHistoryLabel.setFont(font)
        self.dartHistoryLabel.setObjectName("dartHistoryLabel")
        self.dartHistoryLabel.setFont(QFont(families[0], 45))
        self.dartHistoryLabel.setStyleSheet("background-color: transparent")
        self.verticalLayout.addWidget(self.dartHistoryLabel)
        self.dartHistoryGridLayout = QtWidgets.QGridLayout()
        self.dartHistoryGridLayout.setContentsMargins(-1, 0, -1, 0)
        self.dartHistoryGridLayout.setObjectName("dartHistoryGridLayout")
        self.dartUndoButton = QtWidgets.QPushButton(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dartUndoButton.sizePolicy().hasHeightForWidth())
        self.dartUndoButton.setSizePolicy(sizePolicy)
        self.dartUndoButton.setMinimumSize(QtCore.QSize(50, 50))
        self.dartUndoButton.setStyleSheet(
            "border: 4px solid black;"
            "background-color: ivory;"
            "border-top-left-radius :10px;"
            "border-top-right-radius : 10px;"
            "border-bottom-left-radius : 10px;"
            "border-bottom-right-radius : 10px")
        self.dartUndoButton.setObjectName("dartUndoButton")
        self.dartUndoButton.clicked.connect(self.undo)
        self.dartHistoryGridLayout.addWidget(self.dartUndoButton, 1, 2, 1, 1)
        self.nameHLayout = QtWidgets.QHBoxLayout()
        self.nameHLayout.setContentsMargins(-1, 0, -1, 0)
        self.nameHLayout.setObjectName("nameHLayout")
        self.redName = QtWidgets.QLabel(parent=self.centralwidget)
        self.redName.setStyleSheet("color: rgb(206, 0, 5);" "background-color: transparent;")
        self.redName.setObjectName("redName")
        self.redName.setFont(QFont(families[0], 15))



        self.nameHLayout.addWidget(self.redName)
        self.greenName = QtWidgets.QLabel(parent=self.centralwidget)
        self.greenName.setStyleSheet("color: rgb(15, 143, 69);" "background-color: transparent;")
        self.greenName.setFont(QFont(families[0], 15))
        self.greenName.setObjectName("greenName")



        self.nameHLayout.addWidget(self.greenName, 0, QtCore.Qt.AlignmentFlag.AlignRight)
        self.dartHistoryGridLayout.addLayout(self.nameHLayout, 0, 0, 1, 1)
        self.dartHistoryHLayout = QtWidgets.QHBoxLayout()
        self.dartHistoryHLayout.setContentsMargins(-1, 0, -1, 0)
        self.dartHistoryHLayout.setSpacing(0)
        self.dartHistoryHLayout.setObjectName("dartHistoryHLayout")
        self.dartHistory0 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory0.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory0.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                      "border :3px solid black;"
                                      "border-width : 4px 2px 4px 4px;"
                                      "border-top-left-radius :15px;"
                                      "border-top-right-radius : 0px; "
                                      "border-bottom-left-radius : 15px; "
                                      "border-bottom-right-radius : 0px")
        self.dartHistory0.setObjectName("dartHistory0")
        self.dartHistoryHLayout.addWidget(self.dartHistory0)
        self.dartHistory1 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory1.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory1.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "border-left: 2px solid black;\n"
                                    "border-top: 4px solid black;\n"
                                    "border-right: 2px solid black;\n"
                                    "border-bottom:4px solid black")
        self.dartHistory1.setObjectName("dartHistory1")
        self.dartHistoryHLayout.addWidget(self.dartHistory1)
        self.dartHistory_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory_2.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                        "border-left: 2px solid black;\n"
                                        "border-top: 4px solid black;\n"
                                        "border-right: 2px solid black;\n"
                                        "border-bottom:4px solid black")
        self.dartHistory_2.setObjectName("dartHistory_2")
        self.dartHistoryHLayout.addWidget(self.dartHistory_2)
        self.dartHistory_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory_3.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-left: 2px solid black;\n"
"border-top: 4px solid black;\n"
"border-right: 2px solid black;\n"
"border-bottom:4px solid black")
        self.dartHistory_3.setObjectName("dartHistory_3")
        self.dartHistoryHLayout.addWidget(self.dartHistory_3)
        self.dartHistory_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory_4.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-left: 2px solid black;\n"
"border-top: 4px solid black;\n"
"border-right: 2px solid black;\n"
"border-bottom:4px solid black")
        self.dartHistory_4.setObjectName("dartHistory_4")
        self.dartHistoryHLayout.addWidget(self.dartHistory_4)
        self.dartHistory_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory_5.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-left: 2px solid black;\n"
"border-top: 4px solid black;\n"
"border-right: 2px solid black;\n"
"border-bottom:4px solid black")
        self.dartHistory_5.setObjectName("dartHistory_5")
        self.dartHistoryHLayout.addWidget(self.dartHistory_5)
        self.dartHistory_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory_6.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_6.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-left: 2px solid black;\n"
"border-top: 4px solid black;\n"
"border-right: 2px solid black;\n"
"border-bottom:4px solid black")
        self.dartHistory_6.setObjectName("dartHistory_6")
        self.dartHistoryHLayout.addWidget(self.dartHistory_6)
        self.dartHistory_7 = QtWidgets.QLabel(parent=self.centralwidget)
        self.dartHistory_7.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_7.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-left: 2px solid black;\n"
"border-top: 4px solid black;\n"
"border-right: 2px solid black;\n"
"border-bottom:4px solid black")
        self.dartHistory_7.setObjectName("dartHistory_7")
        self.dartHistoryHLayout.addWidget(self.dartHistory_7)
        self.dartHistory_8 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.dartHistory_8.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_8.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-left: 2px solid black;\n"
"border-top: 4px solid black;\n"
"border-right: 2px solid black;\n"
"border-bottom:4px solid black")
        self.dartHistory_8.setObjectName("dartHistory_8")

        self.dartHistory_8.clicked.connect(self.knockOffLeft)

        self.dartHistoryHLayout.addWidget(self.dartHistory_8)
        self.dartHistory_9 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.dartHistory_9.setMinimumSize(QtCore.QSize(50, 50))
        self.dartHistory_9.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                        "border :3px solid black;"
                                        "border-width : 4px 4px 4px 2px;"
                                        "border-top-left-radius :0px;"
                                        "border-top-right-radius : 15px; "
                                        "border-bottom-left-radius : 0px; "
                                        "border-bottom-right-radius : 15px")
        self.dartHistory_9.setObjectName("dartHistory_9")

        self.dartHistory_9.clicked.connect(self.knockOffRight)

        self.dartHistoryHLayout.addWidget(self.dartHistory_9)
        self.dartHistoryGridLayout.addLayout(self.dartHistoryHLayout, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.dartHistoryGridLayout.addItem(spacerItem, 1, 1, 1, 1)
        self.verticalLayout.addLayout(self.dartHistoryGridLayout)
        self.changeScoreboardLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.changeScoreboardLabel.setMinimumSize(QtCore.QSize(0, 79))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.changeScoreboardLabel.setFont(font)
        self.changeScoreboardLabel.setObjectName("changeScoreboardLabel")
        self.changeScoreboardLabel.setStyleSheet("background-color: transparent")
        self.changeScoreboardLabel.setFont(QFont(families[0], 45))
        self.verticalLayout.addWidget(self.changeScoreboardLabel)
        self.scoreboardButtonHLayout = QtWidgets.QHBoxLayout()
        self.scoreboardButtonHLayout.setContentsMargins(18, -1, 18, -1)
        self.scoreboardButtonHLayout.setSpacing(18)
        self.scoreboardButtonHLayout.setObjectName("scoreboardButtonHLayout")
        self.mainButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.mainButton.clicked.connect(self.set_screen_selection_to_main_scoreboard)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainButton.sizePolicy().hasHeightForWidth())
        self.mainButton.setSizePolicy(sizePolicy)
        self.mainButton.setMinimumSize(QtCore.QSize(50, 50))
        self.mainButton.setStyleSheet(
            "border: 4px solid black;"
            "background-color: ivory;"
            "border-top-left-radius :10px;"
            "border-top-right-radius : 10px;"
            "border-bottom-left-radius : 10px;"
            "border-bottom-right-radius : 10px")
        self.mainButton.setObjectName("mainButton")
        self.scoreboardButtonHLayout.addWidget(self.mainButton)
        self.compInfoButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.compInfoButton.clicked.connect(self.set_screen_selection_to_competitor_scoreboard)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.compInfoButton.sizePolicy().hasHeightForWidth())
        self.compInfoButton.setSizePolicy(sizePolicy)
        self.compInfoButton.setMinimumSize(QtCore.QSize(50, 50))
        self.compInfoButton.setStyleSheet(
            "border: 4px solid black;"
            "background-color: ivory;"
            "border-top-left-radius :10px;"
            "border-top-right-radius : 10px;"
            "border-bottom-left-radius : 10px;"
            "border-bottom-right-radius : 10px")
        self.compInfoButton.setObjectName("compInfoButton")
        self.scoreboardButtonHLayout.addWidget(self.compInfoButton)
        self.matchInfoButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.matchInfoButton.clicked.connect(self.set_screen_selection_to_match_scoreboard)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.matchInfoButton.sizePolicy().hasHeightForWidth())
        self.matchInfoButton.setSizePolicy(sizePolicy)
        self.matchInfoButton.setMinimumSize(QtCore.QSize(50, 50))
        self.matchInfoButton.setStyleSheet(
            "border: 4px solid black;"
            "background-color: ivory;"
            "border-top-left-radius :10px;"
            "border-top-right-radius : 10px;"
            "border-bottom-left-radius : 10px;"
            "border-bottom-right-radius : 10px")
        self.matchInfoButton.setObjectName("matchInfoButton")
        self.scoreboardButtonHLayout.addWidget(self.matchInfoButton)
        self.verticalLayout.addLayout(self.scoreboardButtonHLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        MainWindow.setStyleSheet("background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop: 0 rgba(235,181,212,1.000), stop:1 rgba(142,221,241,1.000))")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        if self.scoreboard_selection == 'Competitor Scoreboard':
            self.set_screen_selection_to_competitor_scoreboard()
        elif self.scoreboard_selection == 'Main Scoreboard':
            self.set_screen_selection_to_main_scoreboard()
        elif self.scoreboard_selection == 'Match Scoreboard':
            self.set_screen_selection_to_match_scoreboard()
        else:
            return


    def update_all(self):
        if self.scoreboard_selection == 'Competitor Scoreboard':
            self.competitor_scoreboard.update_competitor_scoreboard()
        elif self.scoreboard_selection == 'Main Scoreboard':
            self.main_scoreboard.update_main_scoreboard()
        elif self.scoreboard_selection == 'Match Scoreboard':
            self.match_scoreboard.update_match_scoreboard()
        else:
            return

    def set_screen_selection_to_main_scoreboard(self):
        if self.match_window:
            self.match_window.hide()
        if self.competitor_window:
            self.competitor_window.hide()
        self.main_scoreboard.show()
        self.scoreboard_selection = 'Main Scoreboard'
        self.update_all()

    def set_screen_selection_to_match_scoreboard(self):
        if self.main_scoreboard:
            self.main_scoreboard.hide()
        if self.competitor_window:
            self.competitor_window.hide()
        self.match_window.show()
        self.scoreboard_selection = 'Match Scoreboard'
        self.update_all()



    def set_screen_selection_to_competitor_scoreboard(self):
        if self.main_scoreboard:
            self.main_scoreboard.hide()
        if self.match_window:
            self.match_window.hide()
        self.competitor_window.show()
        self.scoreboard_selection = 'Competitor Scoreboard'
        self.update_all()













    # Function for when scorer presses bounce-off button. Needs actual functionality but this is a placeholder
    def bounceOff(self):
        self.scorersInterfaceController.update_game_state(multiplier=0, value=0, is_bounce_out=True, is_foul_out=False, is_knock_out=False)
        print("Bounce Off")
        self.update_all()

    # Function for when scorer presses foul button. Needs actual functionality but this is a placeholder
    def foul(self):
        self.scorersInterfaceController.update_game_state(multiplier=0, value=0, is_bounce_out=False, is_foul_out=True, is_knock_out=False)
        print("Foul")
        self.update_all()

    # Function for when scorer presses miss button. Needs actual functionality but this is a placeholder
    def miss(self):
        self.scorersInterfaceController.update_game_state(multiplier=0, value=0, is_bounce_out=False, is_foul_out=False, is_knock_out=False)
        print("Miss")
        self.update_all()

    #Function for when scorer wants to undo a throw
    def undo(self):
        self.scorersInterfaceController.redo_last_throw()
        self.update_all()
        print("Undo")

    #For converting to bounceoff

    def knockOffRight(self):
        #if the player who threw this dart is the same as the current player you can convert it to a knock off
        self.scorersInterfaceController.mark_as_knock_off(9)
        self.update_all()
        print("Knock Off Right")
    def knockOffLeft(self):
        #if the player who threw this dart is the same as the current player you can convert it to a knock off
        self.scorersInterfaceController.mark_as_knock_off(8)
        self.update_all()
        print("Knock Off Left")


    def retranslateUi(self, MainWindow):
        id = QFontDatabase.addApplicationFont(".\\Assets\\Super Boys.ttf")
        if id < 0: print("Error")
        families = QFontDatabase.applicationFontFamilies(id)

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.datboardPlaceholderLabel.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>Dartboard will go here.</p></body></html>"))
        self.missButton.setText(_translate("MainWindow", "MISS"))
        self.foulButton.setText(_translate("MainWindow", "FOUL"))
        self.bounceOffButton.setText(_translate("MainWindow", "BOUNCE-OFF"))
        self.dartHistoryLabel.setText(_translate("MainWindow", "DART HISTORY"))
        self.dartUndoButton.setText(_translate("MainWindow", "↺"))
        font = QFont(QFont(families[0], 30))
        font.setBold(True)
        self.dartUndoButton.setFont(font)
        self.changeScoreboardLabel.setText(_translate("MainWindow", "CHANGE SCOREBOARD VIEW"))
        self.mainButton.setText(_translate("MainWindow", "MAIN"))
        self.mainButton.setFont(QFont(families[0], 20))
        self.compInfoButton.setText(_translate("MainWindow", "COMPETITOR INFO"))
        self.compInfoButton.setFont(QFont(families[0], 20))
        self.matchInfoButton.setText(_translate("MainWindow", "MATCH INFO"))
        self.matchInfoButton.setFont(QFont(families[0], 20))

        # Player 1 First and Last Name Here
        self.redName.setText(_translate("MainWindow", "[P1 NAME]"))
        self.redName.setText(str(self.PlayerOne.get_last_name() + ", " + self.PlayerOne.get_first_name()))
        # Player 2 First and Last Name Here
        self.greenName.setText(_translate("MainWindow", "[P2 NAME]"))
        self.greenName.setText(str(self.PlayerTwo.get_last_name() + ", " + self.PlayerTwo.get_first_name()))

        # Dart throws, needs to be color coded per each respective players color
        self.dartHistory0.setText(_translate("MainWindow", ""))
        self.dartHistory0.setFont(QFont(families[0], 10))
        self.dartHistory1.setText(_translate("MainWindow", ""))
        self.dartHistory1.setFont(QFont(families[0], 10))
        self.dartHistory_2.setText(_translate("MainWindow", ""))
        self.dartHistory_2.setFont(QFont(families[0], 10))
        self.dartHistory_3.setText(_translate("MainWindow", ""))
        self.dartHistory_3.setFont(QFont(families[0], 10))
        self.dartHistory_4.setText(_translate("MainWindow", ""))
        self.dartHistory_4.setFont(QFont(families[0], 10))
        self.dartHistory_5.setText(_translate("MainWindow", ""))
        self.dartHistory_5.setFont(QFont(families[0], 10))
        self.dartHistory_6.setText(_translate("MainWindow", ""))
        self.dartHistory_6.setFont(QFont(families[0], 10))
        self.dartHistory_7.setText(_translate("MainWindow", ""))
        self.dartHistory_7.setFont(QFont(families[0], 10))
        self.dartHistory_8.setText(_translate("MainWindow", ""))
        self.dartHistory_8.setFont(QFont(families[0], 10))
        self.dartHistory_9.setText(_translate("MainWindow", ""))
        self.dartHistory_9.setFont(QFont(families[0], 10))

    def update_all(self):
        if self.scoreboard_selection == 'Competitor Scoreboard':
            self.update_scorers_interface()
            self.competitor_scoreboard.update_competitor_scoreboard()
        elif self.scoreboard_selection == 'Main Scoreboard':
            self.update_scorers_interface()
            self.main_scoreboard.update_main_scoreboard()
        elif self.scoreboard_selection == 'Match Scoreboard':
            self.update_scorers_interface()
            self.match_scoreboard.update_match_scoreboard()
        else:
            return
    def update_scorers_interface(self):

        si_throws = []

        throws = self.Match.get_last_ten_throws_for_all()

        for throw in throws:
            score, is_bounce_out, is_knock_out, is_foul_out = throw

            if is_bounce_out:
                si_throws.append("IsBounceOut")
            elif is_knock_out:
                si_throws.append("IsKnockOut")
            elif is_foul_out:
                si_throws.append("IsFoulOut")
            else:
                si_throws.append(str(score))

        si_dart_boxes = [
            self.dartHistory_9, self.dartHistory_8, self.dartHistory_7,
            self.dartHistory_6, self.dartHistory_5, self.dartHistory_4,
            self.dartHistory_3, self.dartHistory_2, self.dartHistory1,
            self.dartHistory0
        ]

        for i, dart_box in enumerate(si_dart_boxes):
            if i < len(si_throws):
                dart_box.setText(str(si_throws[i]))
            else:
                dart_box.setText("")













